type Mutation {
  create_domain(
    input: DomainInput
  ): DomainResult
}

type Mutation {
  create_record(
    input: RecordInput
  ): String
}

type Mutation {
  delete_domain(
    input: DeleteDomainInput
  ): String
}

type Mutation {
  delete_records(
    input: DeleteRecordsInput
  ): String
}

type Mutation {
  resync_mailchimp_start(
    is_community: Boolean
    id: Int!
  ): MailchimpStart
}

type Query {
  resync_mailchimp_status(
    is_community: Boolean
    id: Int!
  ): MailchimpStatus
}

input SampleInput {
  username: String!
  password: String!
}

input DomainInput {
  domain: String!
  comment: String
  community_id: Int!
}

input DeleteDomainInput {
  dns_hosted_zone_id: Int!
  community_id: Int!
}

input RecordInput {
  name: String!
  value: [String]!
  ttl: Int!
  record_type: String!
  hosted_zone_id: String!
  dns_hosted_zone_id: Int!
  community_id: Int!
}

input DeleteRecordsInput {
  dns_hosted_zone_id: Int!
  records: [Int]!
  community_id: Int!
}

input CertificateInput {
  hosted_zone_id: Int!
}

input PageInput {
  hosted_zone_id: Int!
}

type SampleOutput {
  accessToken: String!
}

type MailchimpStart {
  status: String
}

type MailchimpStatus {
  completed: Int
  waiting: Int
  failed: Int
  active: Int
  last_sync: String
  status: String
}

type DomainResult {
  id: Int!
  domain_name: String!
  comment: String
  name_servers: [String]!
  ns_ok: Boolean
  created_at: String
  updated_at: String
  community_id: Int!
}

type CertificateResult {
  hosted_zone_id: Int!
  status: String
}

type PageResult {
  hosted_zone_id: Int!
  domain_name: String!
  certificate_ok: Boolean
  created_at: String
}

type DeleteDomainResult {
  domain: String
}

scalar String

