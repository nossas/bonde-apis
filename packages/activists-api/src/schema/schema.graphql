type Widget {
  id: Int!
  kind: String!
}

type Model {
  id: Int!
  name: String!
}

type ActivistAction {
  id: Int!
  email: String!
  name: String!
  first_name: String
  last_name: String
  phone: String
  city: String
}

type Action {
  widget: Widget
  mobilization: Model
  community: Model
  activist: ActivistAction
}

type Query {
  unsyncronized_actions(community_id: Int!): [Action]
}

scalar JSON

scalar JSONObject

input DonationInput {
  payment_method: String!
  amount: Int!
  card_hash: String
  customer: JSON
  period: Int
  checkout_data: JSON
}

input FormEntryField {
  uid: String!
  kind: String!
  label: String!
  placeholder: String
  required: Boolean!
  value: String
}

input FormEntryInput {
  fields: [FormEntryField]
}

input EmailPressureInput {
  targets_id: String
  email_subject: String
  email_body: String
}

input ActivistInput {
  email: String!
  name: String!
  first_name: String
  last_name: String
  phone: String
  city: String
}

type Response {
  data: JSON
}

type Status {
  status: String
}

type Mutation {
  create_email_pressure(widget_id: Int!, activist: ActivistInput!, input: EmailPressureInput): Response
  create_form_entry(widget_id: Int!, activist: ActivistInput!, input: FormEntryInput!): Response
  update_mailchimp_settings(api_key: String!, list_id: String!): Status
}